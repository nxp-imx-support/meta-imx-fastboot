From f1514eae065f97cecef014f97ad6762bad13c27c Mon Sep 17 00:00:00 2001
From: Elena Popa <elena.popa@nxp.com>
Date: Fri, 13 Dec 2024 17:38:31 +0200
Subject: [PATCH] imx95: add falcon mode support

Signed-off-by: Elena Popa <elena.popa@nxp.com>
---
 arch/arm/mach-imx/imx9/scmi/soc.c | 34 ++++++++++++++++++++++++++++++-
 board/freescale/imx95_evk/spl.c   | 16 ++++++++++++++-
 common/spl/spl_fat.c              |  2 +-
 include/configs/imx95_evk.h       |  4 +++-
 4 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-imx/imx9/scmi/soc.c b/arch/arm/mach-imx/imx9/scmi/soc.c
index b16fb0e866f..14bacf74dc5 100644
--- a/arch/arm/mach-imx/imx9/scmi/soc.c
+++ b/arch/arm/mach-imx/imx9/scmi/soc.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
- * Copyright 2023 NXP
+ * Copyright 2023-2024 NXP
  *
  * Peng Fan <peng.fan@nxp.com>
  */
@@ -48,6 +48,7 @@
 #include <spl.h>
 #include <mmc.h>
 #include <kaslr.h>
+#include <fat.h>
 
 
 DECLARE_GLOBAL_DATA_PTR;
@@ -1135,3 +1136,34 @@ ulong h_spl_load_read(struct spl_load_info *load, ulong off,
 
 	return blk_dread(bd, sector, count, buf) << bd->log2blksz;
 }
+
+ulong spl_fit_read(struct spl_load_info *load, ulong file_offset,
+			  ulong size, void *buf)
+{
+	loff_t actread;
+	int ret;
+	char *filename = (char *)load->priv;
+	ulong trampoline_sz = SZ_16M;
+	void *trampoline = (void *)((ulong)CFG_SYS_SDRAM_BASE + PHYS_SDRAM_SIZE - trampoline_sz);
+	ulong ns_ddr_end = CFG_SYS_SDRAM_BASE + PHYS_SDRAM_SIZE;
+
+#ifdef PHYS_SDRAM_2_SIZE
+	ns_ddr_end += PHYS_SDRAM_2_SIZE;
+#endif
+
+	/* Check if the buf is in non-secure world, otherwise copy from trampoline */
+	if ((ulong)buf < CFG_SYS_SDRAM_BASE || (ulong)buf + size > ns_ddr_end) {
+		ret = fat_read_file(filename, trampoline, file_offset, size, &actread);
+		if(ret) {
+			return ret;
+		}
+		memcpy(buf, trampoline, size+1);
+		return actread;
+	}
+
+	ret = fat_read_file(filename, buf, file_offset, size, &actread);
+	if (ret)
+		return ret;
+
+	return actread;
+}
diff --git a/board/freescale/imx95_evk/spl.c b/board/freescale/imx95_evk/spl.c
index 6b688186b0c..ec8b682ffe8 100644
--- a/board/freescale/imx95_evk/spl.c
+++ b/board/freescale/imx95_evk/spl.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
- * Copyright 2023 NXP
+ * Copyright 2023-2024 NXP
  */
 
 #include <common.h>
@@ -35,11 +35,25 @@
 #include <dt-bindings/clock/fsl,imx95-clock.h>
 #include <dt-bindings/power/fsl,imx95-power.h>
 #endif
+#include <serial.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
 static struct udevice *scmi_dev __maybe_unused;
 
+#ifdef CONFIG_SPL_OS_BOOT
+int spl_start_uboot(void) {
+       if (IS_ENABLED(CONFIG_SPL_SERIAL) && serial_tstc() && serial_getc()) {
+        /* break into full u boot if any key is pressed */
+                while(serial_tstc()) { /* eat up all the remaining characters */
+                        serial_getc();
+                }
+                return 1;
+        }
+        return 0; // start the Kernel
+}
+#endif
+
 int spl_board_boot_device(enum boot_device boot_dev_spl)
 {
 	switch (boot_dev_spl) {
diff --git a/common/spl/spl_fat.c b/common/spl/spl_fat.c
index a52f9e178e6..a113e686973 100644
--- a/common/spl/spl_fat.c
+++ b/common/spl/spl_fat.c
@@ -46,7 +46,7 @@ static int spl_register_fat_device(struct blk_desc *block_dev, int partition)
 	return err;
 }
 
-static ulong spl_fit_read(struct spl_load_info *load, ulong file_offset,
+ulong __weak spl_fit_read(struct spl_load_info *load, ulong file_offset,
 			  ulong size, void *buf)
 {
 	loff_t actread;
diff --git a/include/configs/imx95_evk.h b/include/configs/imx95_evk.h
index e54176b4205..75aed66071b 100644
--- a/include/configs/imx95_evk.h
+++ b/include/configs/imx95_evk.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
- * Copyright 2023 NXP
+ * Copyright 2023-2024 NXP
  */
 
 #ifndef __IMX95_EVK_H
@@ -113,11 +113,13 @@
 	"mmcroot=/dev/mmcblk1p2 rootwait rw\0" \
 	"mmcautodetect=yes\0" \
 	"mmcargs=setenv bootargs ${cpuidle} ${jh_clk} ${mcore_args} console=${console} root=${mmcroot}\0 " \
+	"mmcargs_fastboot=setenv bootargs ${cpuidle} ${jh_clk} ${mcore_args} console=${console} root=${mmcroot} quiet\0 " \
 	"loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
 	"bootscript=echo Running bootscript from mmc ...; " \
 		"source\0" \
 	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
 	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}\0" \
+	"prepare_fdt=run loadfdt;ext2load mmc ${mmcdev}:2 ${loadaddr} /home/root/.falcon/uImage;run mmcargs_fastboot;spl export fdt ${loadaddr} - ${fdt_addr_r};fatwrite mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} " CONFIG_SPL_FS_LOAD_ARGS_NAME " ${fdtargslen}\0" \
 	"loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}\0" \
 	"auth_os=auth_cntr ${cntr_addr}\0" \
 	"boot_os=booti ${loadaddr} - ${fdt_addr_r};\0" \
-- 
2.25.1

